# Правила и шаблоны проекта

## Шаблоны кода
- **Классы модулей**: Каждый функциональный модуль реализуется как класс с четким разделением ответственности
- **Обработка ошибок**: Используется log_exception для логирования ошибок с полной трассировкой
- **Инициализация WebDriver**: Используется общий паттерн инициализации через WebDriverManager
- **Многопоточность**: Рабочие функции оформляются как worker-методы с передачей данных через параметры
- **Работа с файлами**: Использование контекстных менеджеров (with) для открытия/закрытия файлов
- **Логирование**: Получение логгера через функцию get_logger с указанием имени компонента
- **Проверки сайтов**: Функции проверки сайтов (Яндекс Метрика, HTTPS) реализуются как отдельные методы с четкими результатами
- **Использование Context7**: Использование актуальных версий библиотек и современных практик программирования для обеспечения максимальной актуальности кода

## Предпочтения пользователя
- **Язык комментариев**: Все комментарии пишутся на русском языке
- **Стиль кода**: PEP8 с максимальной длиной строки 100 символов
- **Типизация**: Использование аннотаций типов (typing)
- **Документирование**: Docstrings в формате Google-style для классов и методов
- **Логирование**: Подробное логирование работы программы с различными уровнями детализации
- **Обработка ошибок**: Структурированная обработка с информативными сообщениями об ошибках
- **Актуальность кода**: Предпочтение современных конструкций языка и актуальных версий библиотек (Context7)

## Проектные шаблоны
- **Модульная структура**: Разделение функциональности по модулям с минимальной связанностью
- **Централизованное управление путями**: Использование paths.py для всех путей к файлам
- **Единая система логирования**: Общий подход к логированию через logger.py
- **Параллельная обработка**: Разделение данных на части для параллельной обработки
- **Повторные попытки**: Реализация механизма повторных попыток при возникновении ошибок
- **Контроль ресурсов**: Освобождение ресурсов (особенно WebDriver) в блоках finally
- **Работа с прокси**: Использование пула прокси с ротацией и проверкой работоспособности
- **Современные паттерны**: Использование современных паттернов и подходов Context7 для улучшения кода

## Известные сложности
- **Решение CAPTCHA**: Для различных типов CAPTCHA требуются разные подходы к решению
- **Долгие операции**: Поиск может занимать длительное время, необходим контроль таймаутов
- **Блокировки IP**: При частых запросах возможна блокировка IP со стороны поисковых систем
- **Нестабильность WebDriver**: При длительной работе драйвер может зависать или давать сбои
- **Изменения в структуре страниц**: XPath-выражения могут перестать работать при изменении структуры страниц
- **Обнаружение Яндекс Метрики**: Различные способы внедрения кода метрики требуют разных методов обнаружения
- **Работа с HTTPS**: Необходима корректная обработка редиректов и SSL-сертификатов
- **Совместимость библиотек**: Необходим контроль совместимости при обновлении библиотек до актуальных версий

## Эволюция решений
- **Система логирования**: Начиналась с простых print, затем расширена до полноценной системы логирования
- **Работа с CAPTCHA**: Исходно реализована поддержка только текстовой CAPTCHA, затем добавлены другие типы
- **Управление WebDriver**: Перешли от глобального драйвера к инкапсуляции в WebDriverManager
- **Параллельная обработка**: Начиналась с однопоточного выполнения, расширена до многопоточной обработки
- **Обработка ошибок**: Базовая обработка расширена до централизованной системы с подробным логированием
- **Структура проекта**: Развитие от монолитного скрипта к модульной архитектуре
- **Актуализация кода**: Постепенный переход на современные стандарты и практики Context7

## Шаблоны использования инструментов
- **Selenium**: Использование явных ожиданий (WebDriverWait) вместо неявных пауз
- **API-запросы**: Использование retry-логики для повторных попыток при сбоях API
- **Логирование**: Разделение логов по компонентам с ротацией файлов
- **Файловая система**: Использование pathlib вместо os.path для кроссплатформенности
- **Параллельная обработка**: Разделение данных на равные части для распределения между потоками
- **Работа с прокси**: Проверка доступности и ротация прокси в пуле для обеспечения стабильности работы
- **Проверка HTTPS**: Использование requests с корректной обработкой SSL-сертификатов и редиректов
- **Context7**: Использование современных возможностей языка (async/await, f-strings, walrus оператор и др.) 